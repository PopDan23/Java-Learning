= Java Doc for learning to test Selenium with Java - March 2023

== *1.Revision table:*

// First day -> learning from https://www.softwaretestingmentor.com/java-for-testers-2-what-is-java-classes-and-objects/
//SDK 19 pt Java oracle,
//https://www.tutorialspoint.com/java/index.htm for tutorials
// https://reqres.in/ to test API
//https://getsharex.com/ for screening and other capture img
//

[width="100%",cols="19%,20%,14%,47%",options="header",]
|===
|Version 0.1|Date 12/3/2023 |Author Popescu Dan|Change 0.01
|1 |12.3.2023 |Dan |Initial version
|2 |14.3.2023|Dan |Changes to the structure - added static and dynamic testing
|3 |TBC |Dan |Final Version
|===

== *2.Project description:*

A project about my jorney to learn Java with aplication in Selenium for Testing purposes;
It started in March 2023 and as a

1) Learning about Java first, after that some projects with links here:

== *3.Contant table:*

=== 3.1) Key features of OOP;
==== link:#Encapsulation[a)Encapsulation]

====  link:#Inheritance[b)Inheritance]

====  link:#Polymorphism[c)Polymorphism]

====  link:#Abstraction[d)Abstraction]

=== 3.2) Learning about Selenium;

=== 3.3) Types of testing : Dynamic vs Static;

link:#Dynamic[Dynamic Testing]

link:#Static[Static Testing]

=== 3.4) Integrate Java Codes for automating testing to Selenium;

== Figure 1 - Java Class

image::.idea/images/javaclassimg.jpg[image, align=center , height= , width=450]

 In OOP, a class is a blueprint or template for creating objects.
 It defines the properties and behavior of objects of that class.
 Objects can interact with each other through methods,
 which are functions defined within a class that can be called on objects of that class.

Figure 2 - Example of Object and Class

image::.idea/images/oopclass.jpg[image, align=center , height= , width=350]


====

3.1) Key features of OOP :

a) Encapsulation

b) Inheritance

c) Polymorphism

d) Abstraction

====

link:#

3.2) Learning about Selenium

link:#

3.3) Types of testing : Dynamic vs Static;

 - What is testing

- Types of testing in general

- What is Static Testing + examples

- What is Dinamic Testing + examples

- Dynamic vs Static Testing: comparasion, advantages


3.4) Integrate Java Codes for automating testing to Selenium:

link:#


Learning about class and obj in Java

[#Encapsulation]

=== 3.1)a) Encapsulation

//From Web3: https://www.w3schools.com/java/java_encapsulation.asp

The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:

declare class variables/attributes as private
provide public get and set methods to access and update the value of a private variable

For a QA Engineer, encapsulation is important because it helps ensure that the code is more robust and easier to maintain. By encapsulating the internal data of an object, the code becomes more modular, and changes to one part of the code are less likely to affect other parts of the code.

This can make it easier to test the code and to identify and fix bugs.

To achieve encapsulation in Java:

 - Declare the variables of a class as private.

- Provide public setter and getter methods to modify and view the variables values.

image::.idea/images/encapsul.jpg[image, align=center , height= , width=300]

`` Example 1 - Encapsulation ``

Following is an example that demonstrates how to achieve Encapsulation in Java
[source,java]
----
/* File name : EncapTest.java */
public class EncapTest {
   private String name;
   private String idNum;
   private int age;

   public int getAge() {
      return age;
   }

   public String getName() {
      return name;
   }

   public String getIdNum() {
      return idNum;
   }

   public void setAge( int newAge) {
      age = newAge;
   }

   public void setName(String newName) {
      name = newName;
   }

   public void setIdNum( String newId) {
      idNum = newId;
   }
}
----

The variables of the EncapTest class can be accessed using the following program âˆ’

[source,java]
----
/* File name : RunEncap.java */
public class RunEncap {

   public static void main(String args[]) {
      EncapTest encap = new EncapTest();
      encap.setName("James");
      encap.setAge(20);
      encap.setIdNum("12343ms");

      System.out.print("Name : " + encap.getName() + " Age : " + encap.getAge());
   }
}
----

Output:
[souce,java]
----
Name : James Age : 20
----
[#Inheritance]

=== 3.1)  b) Inheritance


In Java, it is possible to inherit attributes and methods from one class to another. We group the "inheritance concept" into two categories:

- subclass (child) - the class that inherits from another class
- superclass (parent) - the class being inherited from
To inherit from a class, use the extends keyword.

In the example below, the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass):

`` Example 1 - Inheritance``
[source,java]
----
class Vehicle {
  protected String brand = "Ford";        // Vehicle attribute
  public void honk() {                    // Vehicle method
    System.out.println("Tuut, tuut!");
  }
}

class Car extends Vehicle {
  private String modelName = "Mustang";    // Car attribute
  public static void main(String[] args) {

    // Create a myCar object
    Car myCar = new Car();

    // Call the honk() method (from the Vehicle class) on the myCar object
    myCar.honk();

    // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class
    System.out.println(myCar.brand + " " + myCar.modelName);
  }
}
----

image::.idea/images/inheritance.jpg[image, align=center , height= , width=300]

[#Polymorphism]

3.1) c) Polymorphism

Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance. Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class.
Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.
For example, think of a superclass called Animal that has a method called animalSound().

Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):

`Example 1 - Polymorphism`

[source,java]
----
class Animal {
  public void animalSound() {
    System.out.println("The animal makes a sound");
  }
}

class Pig extends Animal {
  public void animalSound() {
    System.out.println("The pig says: wee wee");
  }
}

class Dog extends Animal {
  public void animalSound() {
    System.out.println("The dog says: bow wow");
  }
}
----
Now we can create  *Pig*  and *Dog* objects and call the *animalSound()* method on both of them:

[source,java]
----
class Animal {
  public void animalSound() {
    System.out.println("The animal makes a sound");
  }
}

class Pig extends Animal {
  public void animalSound() {
    System.out.println("The pig says: wee wee");
  }
}

class Dog extends Animal {
  public void animalSound() {
    System.out.println("The dog says: bow wow");
  }
}

class Main {
  public static void main(String[] args) {
    Animal myAnimal = new Animal();  // Create a Animal object
    Animal myPig = new Pig();  // Create a Pig object
    Animal myDog = new Dog();  // Create a Dog object
    myAnimal.animalSound();
    myPig.animalSound();
    myDog.animalSound();
  }
}
----

image::.idea/images/polymorph.jpg[image, align=center , height= , width=300]

[#Abstraction]

3.1) d) Abstraction


Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).

The abstract keyword is a non-access modifier, used for classes and methods:

- Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

- Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).

An abstract class can have both abstract and regular methods:

[source,java]
----
abstract class Animal {
  public abstract void animalSound();
  public void sleep() {
    System.out.println("Zzz");
  }
}
----

From the example above, it is not possible to create an object of the Animal class:

[source,java]
----
Animal myObj = new Animal(); // will generate an error
----

To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class:

[source,java]
----
// Abstract class
abstract class Animal {
  // Abstract method (does not have a body)
  public abstract void animalSound();
  // Regular method
  public void sleep() {
    System.out.println("Zzz");
  }
}

// Subclass (inherit from Animal)
class Pig extends Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig(); // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }
}
----

image::.idea/images/abstraction.jpg[image, align=center , height= , width=300]


=== 3.3 Types of testing : Dynamic vs Static;
//Learning about it from https://www.guru99.com/static-dynamic-testing.html

- What is testing

Software Testing is a method to check whether the actual software product matches expected requirements and to ensure that software product is Defect free. It involves execution of software/system components using manual or automated tools to evaluate one or more properties of interest.



- Types of testing in general

- What is Static Testing + examples

Static Testing is a type of software testing in which software application is tested without code execution. Manual or automated reviews of code, requirement documents and document design are done in order to find the errors. The main objective of static testing is to improve the quality of software applications by finding errors in early stages of software development process.

Static testing involves manual or automated reviews of the documents.
Examples of Work documents-

Requirement specifications
Design document
Source Code
Test Plans
Test Cases
Test Scripts
Help or User document
Web Page content

[text, bold]

Static Testing Techniques
[/text]

Informal Reviews: This is one of the type of review which doesnâ€™t follow any process to find errors in the document. Under this technique, you just review the document and give informal comments on it.

Technical Reviews: A team consisting of your peers, review the technical specification of the software product and checks whether it is suitable for the project. They try to find any discrepancies in the specifications and standards followed. This review concentrates mainly on the technical documentation related to the software such as Test Strategy, Test Plan and requirement specification documents.

Walkthrough: The author of the work product explains the product to his team. Participants can ask questions if any. A meeting is led by the author. Scribe makes note of review comments

Inspection: The main purpose is to find defects and meeting is led by a trained moderator. This review is a formal type of review where it follows a strict process to find the defects. Reviewers have a checklist to review the work products. They record the defect and inform the participants to rectify those errors.

Static code Review: This is a systematic review of the software source code without executing the code. It checks the syntax of the code, coding standards, code optimization, etc. This is also termed as white box testing. This review can be done at any point during development.
- What is Dinamic Testing + examples

- Dynamic vs Static Testing: comparasion, advantages





[#Dynamic]
Dynamic Testing



[#Static]
Static Testing








